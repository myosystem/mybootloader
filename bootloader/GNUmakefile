#
# DO NOT EDIT
# This file is auto-generated by build utility
#
# Module Name:
#
#   GNUmakefile
#
# Abstract:
#
#   Auto-generated makefile for building modules, libraries or platform
#
    

#
# Platform Macro Definition
#
PLATFORM_NAME = bootloader
PLATFORM_GUID = 32ac5d70-874c-4221-9b23-123a782f84e8
PLATFORM_VERSION = 1.0
PLATFORM_RELATIVE_DIR = C:\Users\nanno\Desktop\uefi
PLATFORM_DIR = C:\Users\nanno\Desktop\uefi
PLATFORM_OUTPUT_DIR = Build\bootloader

#
# Module Macro Definition
#
MODULE_NAME = bootloader
MODULE_GUID = 32ac5d70-874c-4221-9b23-123a782f84e8
MODULE_NAME_GUID = bootloader
MODULE_VERSION = 1.0
MODULE_TYPE = UEFI_APPLICATION
MODULE_FILE = bootloader.inf
MODULE_FILE_BASE_NAME = bootloader
BASE_NAME = $(MODULE_NAME)
MODULE_RELATIVE_DIR = C:\Users\nanno\Desktop\uefi
PACKAGE_RELATIVE_DIR = uefi
MODULE_DIR = C:\Users\nanno\Desktop\uefi
FFS_OUTPUT_DIR = 

MODULE_ENTRY_POINT = efi_main
ARCH_ENTRY_POINT = efi_main
IMAGE_ENTRY_POINT = _ModuleEntryPoint

INF_VERSION = 0x00010005
BASE_NAME = bootloader
FILE_GUID = 32ac5d70-874c-4221-9b23-123a782f84e8
MODULE_TYPE = UEFI_APPLICATION
VERSION = 1.0
COMPONENT_NAME = "bootloader"
SUPPORTED_ARCHITECTURES = X64
BINARY_FILE = bootloader.efi

#
# Build Configuration Macro Definition
#
ARCH = X64
TOOLCHAIN = GCC5
TOOLCHAIN_TAG = GCC5
TARGET = RELEASE

#
# Build Directory Macro Definition
#
# PLATFORM_BUILD_DIR = c:\edk2\Build\bootloader\RELEASE_GCC5
BUILD_DIR = c:\edk2\Build\bootloader\RELEASE_GCC5
BIN_DIR = $(BUILD_DIR)\X64
LIB_DIR = $(BIN_DIR)
MODULE_BUILD_DIR = C:\Users\nanno\Desktop\uefi\bootloader
OUTPUT_DIR = C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT
DEBUG_DIR = C:\Users\nanno\Desktop\uefi\bootloader\DEBUG
DEST_DIR_OUTPUT = $(OUTPUT_DIR)
DEST_DIR_DEBUG = $(DEBUG_DIR)

#
# Shell Command Macro
#
CP = copy /y
MV = move /y
RM = del /f /q
MD = mkdir
RD = rmdir /s /q


#
# Tools definitions specific to this module
#
APP_FLAGS = 

ASL_FLAGS = 
ASL_OUTFLAGS =  -p
ASL = C:\ASL\iasl

ASLCC_FLAGS = -x c -fno-lto -m64
ASLCC = gcc

ASLDLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--defsym=PECOFF_HEADER_SIZE=0 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wl,--entry,ReferenceAcpiTable -u ReferenceAcpiTable -Wl,-m,elf_x86_64
ASLDLINK = gcc

ASLPP_FLAGS = -x c -E -include AutoGen.h
ASLPP = gcc

ASM_FLAGS = -c -x assembler -imacros AutoGen.h -m64
ASM = gcc

ASMLINK_FLAGS = /nologo /tiny
ASMLINK = C:\WINDDK\3790.1830\bin\bin16\link16.exe

BROTLI_GUID =  3D532050-5CDA-4FD0-879E-0F7F630D5AFB
BROTLI = BrotliCompress

CC_FLAGS = -g -Os -fshort-wchar -fno-builtin -fno-strict-aliasing -Wall -Werror -Wno-array-bounds -include AutoGen.h -fno-common -fstack-protector -ffunction-sections -fdata-sections -DSTRING_ARRAY_NAME=$(BASE_NAME)Strings -mstack-protector-guard=global -m64 "-DEFIAPI=__attribute__((ms_abi))" -maccumulate-outgoing-args -mno-red-zone -Wno-address -mcmodel=small -fpie -fno-asynchronous-unwind-tables -Wno-address -fno-omit-frame-pointer -flto -DUSING_LTO -Wno-unused-but-set-variable -Wno-unused-const-variable
CC = gcc

CRC32_GUID =  FC1BCDB0-7D31-49AA-936A-A4600D9DD083
CRC32 = GenCrc32

DEPS_FLAGS = -MMD -MF $@.deps

DLINK_FLAGS = -nostdlib -Wl,-n,-q,--gc-sections -z common-page-size=0x40 -Wl,--entry,$(IMAGE_ENTRY_POINT) -u $(IMAGE_ENTRY_POINT) -Wl,-Map,$(DEST_DIR_DEBUG)/$(BASE_NAME).map,--whole-archive -Wl,-melf_x86_64,--oformat=elf64-x86-64,-pie -flto -Os
DLINK = gcc

DLINK2_FLAGS = -Wl,--defsym=PECOFF_HEADER_SIZE=0x228 -Wl,--script=$(EDK_TOOLS_PATH)/Scripts/GccBase.lds -Wno-error

DTC_FLAGS = -H epapr
DTC = dtc

DTCPP = cpp

GENFW_FLAGS = 
GENFW = GenFw

LZMA_GUID =  EE4E5898-3914-4259-9D6E-DC7BD79403CF
LZMA = LzmaCompress

LZMAF86_GUID =  D42AE6BD-1352-4bfb-909A-CA72A6EAE889
LZMAF86 = LzmaF86Compress

MAKE = make

NASM_FLAGS = -f elf64
NASM = C:\Users\nanno\AppData\Local\bin\NASM\nasm

NASMB_FLAGS = -f bin

OBJCOPY_ADDDEBUGFLAG =  
OBJCOPY_FLAGS = 
OBJCOPY = objcopy
OBJCOPY_STRIPFLAG =  --strip-unneeded -R .eh_frame

OPTROM_FLAGS = -e
OPTROM = EfiRom

PKCS7SIGN_GUID =  4AAFD29D-68DF-49EE-8AA9-347D375665A7
PKCS7SIGN = Pkcs7Sign

PP_FLAGS = -E -x assembler-with-cpp -include AutoGen.h
PP = gcc

RC_FLAGS = -I binary -O elf64-x86-64 -B i386 --rename-section .data=.hii
RC = objcopy

RSA2048SHA256SIGN_GUID =  A7717414-C616-4977-9420-844712A735BF
RSA2048SHA256SIGN = Rsa2048Sha256Sign

SLINK = gcc-ar

SYMRENAME_FLAGS = Symbol renaming not needed for
SYMRENAME = echo

TIANO_GUID =  A31280AD-481E-41B6-95E8-127F4C984779
TIANO = TianoCompress

VFR_FLAGS = -l -n
VFR = VfrCompile

VFRPP_FLAGS = -x c -E -P -DVFRCOMPILE --include $(MODULE_NAME)StrDefs.h
VFRPP = gcc

VPDTOOL_GUID =  8C3D856A-9BE6-468E-850A-24F7A8D38E08
VPDTOOL = BPDG


MAKE_FILE = $(MODULE_BUILD_DIR)\GNUmakefile

#
# Build Macro
#
OBJECT_FILES =  \
    $(OUTPUT_DIR)\AutoGen.obj \
    $(OUTPUT_DIR)\bootloader.obj

STATIC_LIBRARY_FILES =  \
    $(BIN_DIR)\MdePkg\Library\BaseDebugLibNull\BaseDebugLibNull\OUTPUT\BaseDebugLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\OUTPUT\BaseLib.lib \
    $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\OUTPUT\BaseMemoryLib.lib \
    $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\OUTPUT\BasePcdLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\OUTPUT\BasePrintLib.lib \
    $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\OUTPUT\FilterLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\OUTPUT\StackCheckLibNull.lib \
    $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\OUTPUT\UefiApplicationEntryPoint.lib \
    $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\OUTPUT\UefiBootServicesTableLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\OUTPUT\UefiDevicePathLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\OUTPUT\UefiLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\OUTPUT\UefiMemoryAllocationLib.lib \
    $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\OUTPUT\UefiRuntimeServicesTableLib.lib \
    $(OUTPUT_DIR)\bootloader.lib

INC =  \
    -IC:\Users\nanno\Desktop\uefi \
    -I$(DEBUG_DIR) \
    -I$(WORKSPACE)\MdePkg \
    -I$(WORKSPACE)\MdePkg\Include \
    -I$(WORKSPACE)\MdePkg\Test\UnitTest\Include \
    -I$(WORKSPACE)\MdePkg\Test\Mock\Include \
    -I$(WORKSPACE)\MdePkg\Library\MipiSysTLib\mipisyst\library\include \
    -I$(WORKSPACE)\MdePkg\Include\X64 \
    -IC:\edk2\MdeModulePkg \
    -IC:\edk2\MdeModulePkg\Include \
    -IC:\edk2\MdeModulePkg\Test\Mock\Include \
    -IC:\edk2\MdePkg \
    -IC:\edk2\MdePkg\Include \
    -IC:\edk2\MdePkg\Test\UnitTest\Include \
    -IC:\edk2\MdePkg\Test\Mock\Include \
    -IC:\edk2\MdePkg\Library\MipiSysTLib\mipisyst\library\include \
    -IC:\edk2\MdePkg\Include\X64

OBJECT_FILES_LIST = C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\object_files.lst
STATIC_LIBRARY_FILES_LIST = C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\static_library_files.lst


#
# Overridable Target Macro Definitions
#
FORCE_REBUILD = force_build
INIT_TARGET = init
PCH_TARGET =
BC_TARGET = 
CODA_TARGET = C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.efi \
              

#
# Default target, which will build dependent libraries in addition to source files
#

all: mbuild


#
# Target used when called from platform makefile, which will bypass the build of dependent libraries
#

pbuild: $(INIT_TARGET) $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# ModuleTarget
#

mbuild: $(INIT_TARGET) $(BC_TARGET) gen_libs $(PCH_TARGET) $(CODA_TARGET)

#
# Build Target used in multi-thread build mode, which will bypass the init and gen_libs targets
#

tbuild: $(BC_TARGET) $(PCH_TARGET) $(CODA_TARGET)

#
# Phony target which is used to force executing commands for a target
#
force_build:
	-@

#
# Target to update the FD
#

fds: mbuild gen_fds

#
# Initialization target: print build information and create necessary directories
#
init: info dirs

info:
	-@echo Building ... $(MODULE_DIR)\$(MODULE_FILE) [$(ARCH)]

dirs:
	-@if not exist $(DEBUG_DIR) $(MD) $(DEBUG_DIR)
	-@if not exist $(OUTPUT_DIR) $(MD) $(OUTPUT_DIR)


strdefs:
	-@$(CP) $(DEBUG_DIR)\AutoGen.h $(DEBUG_DIR)\$(MODULE_NAME)StrDefs.h

#
# GenLibsTarget
#
gen_libs:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseDebugLibNull\BaseDebugLibNull\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\GNUmakefile
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\GNUmakefile
	@cd $(MODULE_BUILD_DIR)

#
# Build Flash Device Image
#
gen_fds:
	@"$(MAKE)" $(MAKE_FLAGS) -f $(BUILD_DIR)\GNUmakefile fds
	@cd $(MODULE_BUILD_DIR)

include $(MODULE_BUILD_DIR)\dependency
include $(MODULE_BUILD_DIR)\deps_target

#
# Individual Object Build Targets
#
$(OUTPUT_DIR)\AutoGen.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\AutoGen.obj : $(DEBUG_DIR)\AutoGen.h
$(OUTPUT_DIR)\AutoGen.obj : $(DEBUG_DIR)\AutoGen.c
	"$(CC)" $(DEPS_FLAGS) $(CC_FLAGS) -c -o C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\.\AutoGen.obj $(INC) C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\AutoGen.c

$(OUTPUT_DIR)\bootloader.obj : $(MAKE_FILE)
$(OUTPUT_DIR)\bootloader.obj : $(DEBUG_DIR)\AutoGen.h
$(OUTPUT_DIR)\bootloader.obj : $(MODULE_BUILD_DIR).c
	"$(CC)" $(DEPS_FLAGS) $(CC_FLAGS) -c -o C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\.\bootloader.obj $(INC) C:\Users\nanno\Desktop\uefi\bootloader.c

$(OUTPUT_DIR)\bootloader.lib : $(OBJECT_FILES)
$(OUTPUT_DIR)\bootloader.lib : $(OBJECT_FILES_LIST)
	$(RM) C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.lib
	"$(SLINK)" cr C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.lib $(SLINK_FLAGS) @$(OBJECT_FILES_LIST)

$(DEBUG_DIR)\bootloader.dll : $(MAKE_FILE)
$(DEBUG_DIR)\bootloader.dll : $(STATIC_LIBRARY_FILES)
$(DEBUG_DIR)\bootloader.dll : $(STATIC_LIBRARY_FILES_LIST)
	"$(DLINK)" -o C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll $(DLINK_FLAGS) -Wl,--start-group,@$(STATIC_LIBRARY_FILES_LIST),--end-group $(CC_FLAGS) $(DLINK2_FLAGS)
	"$(OBJCOPY)" $(OBJCOPY_FLAGS) C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll

$(OUTPUT_DIR)\bootloader.efi : $(DEBUG_DIR)\bootloader.dll
	$(CP) C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll $(DEBUG_DIR)\$(MODULE_NAME).debug
	"$(OBJCOPY)" $(OBJCOPY_STRIPFLAG) C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll
	-"$(OBJCOPY)" $(OBJCOPY_ADDDEBUGFLAG) C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll
	-$(CP) $(DEBUG_DIR)\$(MODULE_NAME).debug $(BIN_DIR)\$(MODULE_NAME_GUID).debug
	"$(GENFW)" -e $(MODULE_TYPE) -o C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.efi C:\Users\nanno\Desktop\uefi\bootloader\DEBUG\bootloader.dll $(GENFW_FLAGS)
	$(CP) C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.efi $(DEBUG_DIR)
	$(CP) C:\Users\nanno\Desktop\uefi\bootloader\OUTPUT\bootloader.efi $(BIN_DIR)\$(MODULE_NAME_GUID).efi
	-$(CP) $(DEBUG_DIR)\*.map $(OUTPUT_DIR)

$(OUTPUT_DIR)\bootloader.map : $(OUTPUT_DIR)\bootloader.efi
	



#
# clean all intermediate files
#
clean:
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
		$(RM) AutoGenTimeStamp

#
# clean all generated files
#
cleanall:
	if exist $(DEBUG_DIR) $(RD) $(DEBUG_DIR)
	if exist $(OUTPUT_DIR) $(RD) $(OUTPUT_DIR)
	$(RM) *.pdb *.idb > NUL 2>&1
	$(RM) $(BIN_DIR)\$(MODULE_NAME).efi
	$(RM) AutoGenTimeStamp

#
# clean all dependent libraries built
#
cleanlib:
	-@if exist $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\RegisterFilterLibNull\RegisterFilterLibNull\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseDebugLibNull\BaseDebugLibNull\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseDebugLibNull\BaseDebugLibNull\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseMemoryLib\BaseMemoryLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BaseLib\BaseLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePcdLibNull\BasePcdLibNull\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiBootServicesTableLib\UefiBootServicesTableLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\BasePrintLib\BasePrintLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiMemoryAllocationLib\UefiMemoryAllocationLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiDevicePathLib\UefiDevicePathLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiRuntimeServicesTableLib\UefiRuntimeServicesTableLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiLib\UefiLib\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\UefiApplicationEntryPoint\UefiApplicationEntryPoint\GNUmakefile cleanall
	-@if exist $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\GNUmakefile "$(MAKE)" $(MAKE_FLAGS) -f $(BIN_DIR)\MdePkg\Library\StackCheckLibNull\StackCheckLibNull\GNUmakefile cleanall
	@cd $(MODULE_BUILD_DIR)

